// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bloodhoundad/azurehound/v2/client (interfaces: AzureClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	query "github.com/bloodhoundad/azurehound/v2/client/query"
	azure "github.com/bloodhoundad/azurehound/v2/models/azure"
	gomock "go.uber.org/mock/gomock"
)

// MockAzureClient is a mock of AzureClient interface.
type MockAzureClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureClientMockRecorder
}

// MockAzureClientMockRecorder is the mock recorder for MockAzureClient.
type MockAzureClientMockRecorder struct {
	mock *MockAzureClient
}

// NewMockAzureClient creates a new mock instance.
func NewMockAzureClient(ctrl *gomock.Controller) *MockAzureClient {
	mock := &MockAzureClient{ctrl: ctrl}
	mock.recorder = &MockAzureClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureClient) EXPECT() *MockAzureClientMockRecorder {
	return m.recorder
}

// CloseIdleConnections mocks base method.
func (m *MockAzureClient) CloseIdleConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseIdleConnections")
}

// CloseIdleConnections indicates an expected call of CloseIdleConnections.
func (mr *MockAzureClientMockRecorder) CloseIdleConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIdleConnections", reflect.TypeOf((*MockAzureClient)(nil).CloseIdleConnections))
}

// GetAzureADAppRoleAssignments mocks base method.
func (m *MockAzureClient) GetAzureADAppRoleAssignments(arg0 context.Context, arg1 string, arg2 query.GraphParams) (azure.AppRoleAssignmentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADAppRoleAssignments", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.AppRoleAssignmentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADAppRoleAssignments indicates an expected call of GetAzureADAppRoleAssignments.
func (mr *MockAzureClientMockRecorder) GetAzureADAppRoleAssignments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADAppRoleAssignments", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADAppRoleAssignments), arg0, arg1, arg2)
}

// GetAzureADApps mocks base method.
func (m *MockAzureClient) GetAzureADApps(arg0 context.Context, arg1 query.GraphParams) (azure.ApplicationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADApps", arg0, arg1)
	ret0, _ := ret[0].(azure.ApplicationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADApps indicates an expected call of GetAzureADApps.
func (mr *MockAzureClientMockRecorder) GetAzureADApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADApps", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADApps), arg0, arg1)
}

// GetAzureADGroupMembers mocks base method.
func (m *MockAzureClient) GetAzureADGroupMembers(arg0 context.Context, arg1 string, arg2 query.GraphParams) (azure.MemberObjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADGroupMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.MemberObjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADGroupMembers indicates an expected call of GetAzureADGroupMembers.
func (mr *MockAzureClientMockRecorder) GetAzureADGroupMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADGroupMembers", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADGroupMembers), arg0, arg1, arg2)
}

// GetAzureADGroupOwners mocks base method.
func (m *MockAzureClient) GetAzureADGroupOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) (azure.DirectoryObjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADGroupOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.DirectoryObjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADGroupOwners indicates an expected call of GetAzureADGroupOwners.
func (mr *MockAzureClientMockRecorder) GetAzureADGroupOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADGroupOwners", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADGroupOwners), arg0, arg1, arg2)
}

// GetAzureADGroups mocks base method.
func (m *MockAzureClient) GetAzureADGroups(arg0 context.Context, arg1 query.GraphParams) (azure.GroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADGroups", arg0, arg1)
	ret0, _ := ret[0].(azure.GroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADGroups indicates an expected call of GetAzureADGroups.
func (mr *MockAzureClientMockRecorder) GetAzureADGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADGroups", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADGroups), arg0, arg1)
}

// GetAzureADOrganization mocks base method.
func (m *MockAzureClient) GetAzureADOrganization(arg0 context.Context, arg1 []string) (*azure.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADOrganization", arg0, arg1)
	ret0, _ := ret[0].(*azure.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADOrganization indicates an expected call of GetAzureADOrganization.
func (mr *MockAzureClientMockRecorder) GetAzureADOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADOrganization", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADOrganization), arg0, arg1)
}

// GetAzureADRoleAssignments mocks base method.
func (m *MockAzureClient) GetAzureADRoleAssignments(arg0 context.Context, arg1 query.GraphParams) (azure.UnifiedRoleAssignmentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADRoleAssignments", arg0, arg1)
	ret0, _ := ret[0].(azure.UnifiedRoleAssignmentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADRoleAssignments indicates an expected call of GetAzureADRoleAssignments.
func (mr *MockAzureClientMockRecorder) GetAzureADRoleAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADRoleAssignments", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADRoleAssignments), arg0, arg1)
}

// GetAzureADRoles mocks base method.
func (m *MockAzureClient) GetAzureADRoles(arg0 context.Context, arg1 string) (azure.RoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADRoles", arg0, arg1)
	ret0, _ := ret[0].(azure.RoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADRoles indicates an expected call of GetAzureADRoles.
func (mr *MockAzureClientMockRecorder) GetAzureADRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADRoles", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADRoles), arg0, arg1)
}

// GetAzureADServicePrincipalOwners mocks base method.
func (m *MockAzureClient) GetAzureADServicePrincipalOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) (azure.DirectoryObjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADServicePrincipalOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.DirectoryObjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADServicePrincipalOwners indicates an expected call of GetAzureADServicePrincipalOwners.
func (mr *MockAzureClientMockRecorder) GetAzureADServicePrincipalOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADServicePrincipalOwners", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADServicePrincipalOwners), arg0, arg1, arg2)
}

// GetAzureADServicePrincipals mocks base method.
func (m *MockAzureClient) GetAzureADServicePrincipals(arg0 context.Context, arg1 query.GraphParams) (azure.ServicePrincipalList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADServicePrincipals", arg0, arg1)
	ret0, _ := ret[0].(azure.ServicePrincipalList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADServicePrincipals indicates an expected call of GetAzureADServicePrincipals.
func (mr *MockAzureClientMockRecorder) GetAzureADServicePrincipals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADServicePrincipals", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADServicePrincipals), arg0, arg1)
}

// GetAzureADTenants mocks base method.
func (m *MockAzureClient) GetAzureADTenants(arg0 context.Context, arg1 bool) (azure.TenantList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADTenants", arg0, arg1)
	ret0, _ := ret[0].(azure.TenantList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADTenants indicates an expected call of GetAzureADTenants.
func (mr *MockAzureClientMockRecorder) GetAzureADTenants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADTenants", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADTenants), arg0, arg1)
}

// GetAzureADUsers mocks base method.
func (m *MockAzureClient) GetAzureADUsers(arg0 context.Context, arg1 query.GraphParams) (azure.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureADUsers", arg0, arg1)
	ret0, _ := ret[0].(azure.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureADUsers indicates an expected call of GetAzureADUsers.
func (mr *MockAzureClientMockRecorder) GetAzureADUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureADUsers", reflect.TypeOf((*MockAzureClient)(nil).GetAzureADUsers), arg0, arg1)
}

// GetAzureAutomationAccounts mocks base method.
func (m *MockAzureClient) GetAzureAutomationAccounts(arg0 context.Context, arg1 string) (azure.AutomationAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureAutomationAccounts", arg0, arg1)
	ret0, _ := ret[0].(azure.AutomationAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureAutomationAccounts indicates an expected call of GetAzureAutomationAccounts.
func (mr *MockAzureClientMockRecorder) GetAzureAutomationAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureAutomationAccounts", reflect.TypeOf((*MockAzureClient)(nil).GetAzureAutomationAccounts), arg0, arg1)
}

// GetAzureContainerRegistries mocks base method.
func (m *MockAzureClient) GetAzureContainerRegistries(arg0 context.Context, arg1 string) (azure.ContainerRegistryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureContainerRegistries", arg0, arg1)
	ret0, _ := ret[0].(azure.ContainerRegistryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureContainerRegistries indicates an expected call of GetAzureContainerRegistries.
func (mr *MockAzureClientMockRecorder) GetAzureContainerRegistries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureContainerRegistries", reflect.TypeOf((*MockAzureClient)(nil).GetAzureContainerRegistries), arg0, arg1)
}

// GetAzureDeviceRegisteredOwners mocks base method.
func (m *MockAzureClient) GetAzureDeviceRegisteredOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) (azure.DirectoryObjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureDeviceRegisteredOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.DirectoryObjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureDeviceRegisteredOwners indicates an expected call of GetAzureDeviceRegisteredOwners.
func (mr *MockAzureClientMockRecorder) GetAzureDeviceRegisteredOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureDeviceRegisteredOwners", reflect.TypeOf((*MockAzureClient)(nil).GetAzureDeviceRegisteredOwners), arg0, arg1, arg2)
}

// GetAzureDevices mocks base method.
func (m *MockAzureClient) GetAzureDevices(arg0 context.Context, arg1 query.GraphParams) (azure.DeviceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureDevices", arg0, arg1)
	ret0, _ := ret[0].(azure.DeviceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureDevices indicates an expected call of GetAzureDevices.
func (mr *MockAzureClientMockRecorder) GetAzureDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureDevices", reflect.TypeOf((*MockAzureClient)(nil).GetAzureDevices), arg0, arg1)
}

// GetAzureFunctionApps mocks base method.
func (m *MockAzureClient) GetAzureFunctionApps(arg0 context.Context, arg1 string) (azure.FunctionAppList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureFunctionApps", arg0, arg1)
	ret0, _ := ret[0].(azure.FunctionAppList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureFunctionApps indicates an expected call of GetAzureFunctionApps.
func (mr *MockAzureClientMockRecorder) GetAzureFunctionApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureFunctionApps", reflect.TypeOf((*MockAzureClient)(nil).GetAzureFunctionApps), arg0, arg1)
}

// GetAzureKeyVaults mocks base method.
func (m *MockAzureClient) GetAzureKeyVaults(arg0 context.Context, arg1 string, arg2 query.RMParams) (azure.KeyVaultList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureKeyVaults", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.KeyVaultList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureKeyVaults indicates an expected call of GetAzureKeyVaults.
func (mr *MockAzureClientMockRecorder) GetAzureKeyVaults(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureKeyVaults", reflect.TypeOf((*MockAzureClient)(nil).GetAzureKeyVaults), arg0, arg1, arg2)
}

// GetAzureLogicApps mocks base method.
func (m *MockAzureClient) GetAzureLogicApps(arg0 context.Context, arg1, arg2 string, arg3 int32) (azure.LogicAppList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureLogicApps", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(azure.LogicAppList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureLogicApps indicates an expected call of GetAzureLogicApps.
func (mr *MockAzureClientMockRecorder) GetAzureLogicApps(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureLogicApps", reflect.TypeOf((*MockAzureClient)(nil).GetAzureLogicApps), arg0, arg1, arg2, arg3)
}

// GetAzureManagementGroupDescendants mocks base method.
func (m *MockAzureClient) GetAzureManagementGroupDescendants(arg0 context.Context, arg1 string, arg2 int32) (azure.DescendantInfoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureManagementGroupDescendants", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.DescendantInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureManagementGroupDescendants indicates an expected call of GetAzureManagementGroupDescendants.
func (mr *MockAzureClientMockRecorder) GetAzureManagementGroupDescendants(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureManagementGroupDescendants", reflect.TypeOf((*MockAzureClient)(nil).GetAzureManagementGroupDescendants), arg0, arg1, arg2)
}

// GetAzureManagementGroups mocks base method.
func (m *MockAzureClient) GetAzureManagementGroups(arg0 context.Context, arg1 string) (azure.ManagementGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureManagementGroups", arg0, arg1)
	ret0, _ := ret[0].(azure.ManagementGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureManagementGroups indicates an expected call of GetAzureManagementGroups.
func (mr *MockAzureClientMockRecorder) GetAzureManagementGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureManagementGroups", reflect.TypeOf((*MockAzureClient)(nil).GetAzureManagementGroups), arg0, arg1)
}

// GetAzureResourceGroups mocks base method.
func (m *MockAzureClient) GetAzureResourceGroups(arg0 context.Context, arg1 string, arg2 query.RMParams) (azure.ResourceGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureResourceGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.ResourceGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureResourceGroups indicates an expected call of GetAzureResourceGroups.
func (mr *MockAzureClientMockRecorder) GetAzureResourceGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureResourceGroups", reflect.TypeOf((*MockAzureClient)(nil).GetAzureResourceGroups), arg0, arg1, arg2)
}

// GetAzureStorageAccounts mocks base method.
func (m *MockAzureClient) GetAzureStorageAccounts(arg0 context.Context, arg1 string) (azure.StorageAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureStorageAccounts", arg0, arg1)
	ret0, _ := ret[0].(azure.StorageAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureStorageAccounts indicates an expected call of GetAzureStorageAccounts.
func (mr *MockAzureClientMockRecorder) GetAzureStorageAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureStorageAccounts", reflect.TypeOf((*MockAzureClient)(nil).GetAzureStorageAccounts), arg0, arg1)
}

// GetAzureStorageContainers mocks base method.
func (m *MockAzureClient) GetAzureStorageContainers(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) (azure.StorageContainerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureStorageContainers", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(azure.StorageContainerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureStorageContainers indicates an expected call of GetAzureStorageContainers.
func (mr *MockAzureClientMockRecorder) GetAzureStorageContainers(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureStorageContainers", reflect.TypeOf((*MockAzureClient)(nil).GetAzureStorageContainers), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetAzureSubscriptions mocks base method.
func (m *MockAzureClient) GetAzureSubscriptions(arg0 context.Context) (azure.SubscriptionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureSubscriptions", arg0)
	ret0, _ := ret[0].(azure.SubscriptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureSubscriptions indicates an expected call of GetAzureSubscriptions.
func (mr *MockAzureClientMockRecorder) GetAzureSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureSubscriptions", reflect.TypeOf((*MockAzureClient)(nil).GetAzureSubscriptions), arg0)
}

// GetAzureVMScaleSets mocks base method.
func (m *MockAzureClient) GetAzureVMScaleSets(arg0 context.Context, arg1 string) (azure.VMScaleSetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureVMScaleSets", arg0, arg1)
	ret0, _ := ret[0].(azure.VMScaleSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureVMScaleSets indicates an expected call of GetAzureVMScaleSets.
func (mr *MockAzureClientMockRecorder) GetAzureVMScaleSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureVMScaleSets", reflect.TypeOf((*MockAzureClient)(nil).GetAzureVMScaleSets), arg0, arg1)
}

// GetAzureVirtualMachines mocks base method.
func (m *MockAzureClient) GetAzureVirtualMachines(arg0 context.Context, arg1 string, arg2 query.RMParams) (azure.VirtualMachineList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureVirtualMachines", arg0, arg1, arg2)
	ret0, _ := ret[0].(azure.VirtualMachineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureVirtualMachines indicates an expected call of GetAzureVirtualMachines.
func (mr *MockAzureClientMockRecorder) GetAzureVirtualMachines(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureVirtualMachines", reflect.TypeOf((*MockAzureClient)(nil).GetAzureVirtualMachines), arg0, arg1, arg2)
}

// GetAzureWebApps mocks base method.
func (m *MockAzureClient) GetAzureWebApps(arg0 context.Context, arg1 string) (azure.WebAppList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureWebApps", arg0, arg1)
	ret0, _ := ret[0].(azure.WebAppList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAzureWebApps indicates an expected call of GetAzureWebApps.
func (mr *MockAzureClientMockRecorder) GetAzureWebApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureWebApps", reflect.TypeOf((*MockAzureClient)(nil).GetAzureWebApps), arg0, arg1)
}

// GetRoleAssignmentsForResource mocks base method.
func (m *MockAzureClient) GetRoleAssignmentsForResource(arg0 context.Context, arg1, arg2, arg3 string) (azure.RoleAssignmentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleAssignmentsForResource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(azure.RoleAssignmentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleAssignmentsForResource indicates an expected call of GetRoleAssignmentsForResource.
func (mr *MockAzureClientMockRecorder) GetRoleAssignmentsForResource(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleAssignmentsForResource", reflect.TypeOf((*MockAzureClient)(nil).GetRoleAssignmentsForResource), arg0, arg1, arg2, arg3)
}

// ListAzureADAppOwners mocks base method.
func (m *MockAzureClient) ListAzureADAppOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) <-chan azure.AppOwnerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADAppOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.AppOwnerResult)
	return ret0
}

// ListAzureADAppOwners indicates an expected call of ListAzureADAppOwners.
func (mr *MockAzureClientMockRecorder) ListAzureADAppOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADAppOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADAppOwners), arg0, arg1, arg2)
}

// ListAzureADAppRoleAssignments mocks base method.
func (m *MockAzureClient) ListAzureADAppRoleAssignments(arg0 context.Context, arg1 string, arg2 query.GraphParams) <-chan azure.AppRoleAssignmentResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADAppRoleAssignments", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.AppRoleAssignmentResult)
	return ret0
}

// ListAzureADAppRoleAssignments indicates an expected call of ListAzureADAppRoleAssignments.
func (mr *MockAzureClientMockRecorder) ListAzureADAppRoleAssignments(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADAppRoleAssignments", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADAppRoleAssignments), arg0, arg1, arg2)
}

// ListAzureADApps mocks base method.
func (m *MockAzureClient) ListAzureADApps(arg0 context.Context, arg1 query.GraphParams) <-chan azure.ApplicationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADApps", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.ApplicationResult)
	return ret0
}

// ListAzureADApps indicates an expected call of ListAzureADApps.
func (mr *MockAzureClientMockRecorder) ListAzureADApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADApps), arg0, arg1)
}

// ListAzureADGroupMembers mocks base method.
func (m *MockAzureClient) ListAzureADGroupMembers(arg0 context.Context, arg1 string, arg2 query.GraphParams) <-chan azure.MemberObjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADGroupMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.MemberObjectResult)
	return ret0
}

// ListAzureADGroupMembers indicates an expected call of ListAzureADGroupMembers.
func (mr *MockAzureClientMockRecorder) ListAzureADGroupMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADGroupMembers", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADGroupMembers), arg0, arg1, arg2)
}

// ListAzureADGroupOwners mocks base method.
func (m *MockAzureClient) ListAzureADGroupOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) <-chan azure.GroupOwnerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADGroupOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.GroupOwnerResult)
	return ret0
}

// ListAzureADGroupOwners indicates an expected call of ListAzureADGroupOwners.
func (mr *MockAzureClientMockRecorder) ListAzureADGroupOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADGroupOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADGroupOwners), arg0, arg1, arg2)
}

// ListAzureADGroups mocks base method.
func (m *MockAzureClient) ListAzureADGroups(arg0 context.Context, arg1 query.GraphParams) <-chan azure.GroupResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADGroups", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.GroupResult)
	return ret0
}

// ListAzureADGroups indicates an expected call of ListAzureADGroups.
func (mr *MockAzureClientMockRecorder) ListAzureADGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADGroups", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADGroups), arg0, arg1)
}

// ListAzureADRoleAssignments mocks base method.
func (m *MockAzureClient) ListAzureADRoleAssignments(arg0 context.Context, arg1 query.GraphParams) <-chan azure.UnifiedRoleAssignmentResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADRoleAssignments", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.UnifiedRoleAssignmentResult)
	return ret0
}

// ListAzureADRoleAssignments indicates an expected call of ListAzureADRoleAssignments.
func (mr *MockAzureClientMockRecorder) ListAzureADRoleAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADRoleAssignments", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADRoleAssignments), arg0, arg1)
}

// ListAzureADRoles mocks base method.
func (m *MockAzureClient) ListAzureADRoles(arg0 context.Context, arg1 string) <-chan azure.RoleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADRoles", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.RoleResult)
	return ret0
}

// ListAzureADRoles indicates an expected call of ListAzureADRoles.
func (mr *MockAzureClientMockRecorder) ListAzureADRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADRoles", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADRoles), arg0, arg1)
}

// ListAzureADServicePrincipalOwners mocks base method.
func (m *MockAzureClient) ListAzureADServicePrincipalOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) <-chan azure.ServicePrincipalOwnerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADServicePrincipalOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.ServicePrincipalOwnerResult)
	return ret0
}

// ListAzureADServicePrincipalOwners indicates an expected call of ListAzureADServicePrincipalOwners.
func (mr *MockAzureClientMockRecorder) ListAzureADServicePrincipalOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADServicePrincipalOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADServicePrincipalOwners), arg0, arg1, arg2)
}

// ListAzureADServicePrincipals mocks base method.
func (m *MockAzureClient) ListAzureADServicePrincipals(arg0 context.Context, arg1 query.GraphParams) <-chan azure.ServicePrincipalResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADServicePrincipals", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.ServicePrincipalResult)
	return ret0
}

// ListAzureADServicePrincipals indicates an expected call of ListAzureADServicePrincipals.
func (mr *MockAzureClientMockRecorder) ListAzureADServicePrincipals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADServicePrincipals", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADServicePrincipals), arg0, arg1)
}

// ListAzureADTenants mocks base method.
func (m *MockAzureClient) ListAzureADTenants(arg0 context.Context, arg1 bool) <-chan azure.TenantResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADTenants", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.TenantResult)
	return ret0
}

// ListAzureADTenants indicates an expected call of ListAzureADTenants.
func (mr *MockAzureClientMockRecorder) ListAzureADTenants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADTenants", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADTenants), arg0, arg1)
}

// ListAzureADUsers mocks base method.
func (m *MockAzureClient) ListAzureADUsers(arg0 context.Context, arg1 query.GraphParams) <-chan azure.UserResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureADUsers", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.UserResult)
	return ret0
}

// ListAzureADUsers indicates an expected call of ListAzureADUsers.
func (mr *MockAzureClientMockRecorder) ListAzureADUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureADUsers", reflect.TypeOf((*MockAzureClient)(nil).ListAzureADUsers), arg0, arg1)
}

// ListAzureAutomationAccounts mocks base method.
func (m *MockAzureClient) ListAzureAutomationAccounts(arg0 context.Context, arg1 string) <-chan azure.AutomationAccountResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureAutomationAccounts", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.AutomationAccountResult)
	return ret0
}

// ListAzureAutomationAccounts indicates an expected call of ListAzureAutomationAccounts.
func (mr *MockAzureClientMockRecorder) ListAzureAutomationAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureAutomationAccounts", reflect.TypeOf((*MockAzureClient)(nil).ListAzureAutomationAccounts), arg0, arg1)
}

// ListAzureContainerRegistries mocks base method.
func (m *MockAzureClient) ListAzureContainerRegistries(arg0 context.Context, arg1 string) <-chan azure.ContainerRegistryResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureContainerRegistries", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.ContainerRegistryResult)
	return ret0
}

// ListAzureContainerRegistries indicates an expected call of ListAzureContainerRegistries.
func (mr *MockAzureClientMockRecorder) ListAzureContainerRegistries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureContainerRegistries", reflect.TypeOf((*MockAzureClient)(nil).ListAzureContainerRegistries), arg0, arg1)
}

// ListAzureDeviceRegisteredOwners mocks base method.
func (m *MockAzureClient) ListAzureDeviceRegisteredOwners(arg0 context.Context, arg1 string, arg2 query.GraphParams) <-chan azure.DeviceRegisteredOwnerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureDeviceRegisteredOwners", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.DeviceRegisteredOwnerResult)
	return ret0
}

// ListAzureDeviceRegisteredOwners indicates an expected call of ListAzureDeviceRegisteredOwners.
func (mr *MockAzureClientMockRecorder) ListAzureDeviceRegisteredOwners(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureDeviceRegisteredOwners", reflect.TypeOf((*MockAzureClient)(nil).ListAzureDeviceRegisteredOwners), arg0, arg1, arg2)
}

// ListAzureDevices mocks base method.
func (m *MockAzureClient) ListAzureDevices(arg0 context.Context, arg1 query.GraphParams) <-chan azure.DeviceResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureDevices", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.DeviceResult)
	return ret0
}

// ListAzureDevices indicates an expected call of ListAzureDevices.
func (mr *MockAzureClientMockRecorder) ListAzureDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureDevices", reflect.TypeOf((*MockAzureClient)(nil).ListAzureDevices), arg0, arg1)
}

// ListAzureFunctionApps mocks base method.
func (m *MockAzureClient) ListAzureFunctionApps(arg0 context.Context, arg1 string) <-chan azure.FunctionAppResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureFunctionApps", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.FunctionAppResult)
	return ret0
}

// ListAzureFunctionApps indicates an expected call of ListAzureFunctionApps.
func (mr *MockAzureClientMockRecorder) ListAzureFunctionApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureFunctionApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureFunctionApps), arg0, arg1)
}

// ListAzureKeyVaults mocks base method.
func (m *MockAzureClient) ListAzureKeyVaults(arg0 context.Context, arg1 string, arg2 query.RMParams) <-chan azure.KeyVaultResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureKeyVaults", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.KeyVaultResult)
	return ret0
}

// ListAzureKeyVaults indicates an expected call of ListAzureKeyVaults.
func (mr *MockAzureClientMockRecorder) ListAzureKeyVaults(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureKeyVaults", reflect.TypeOf((*MockAzureClient)(nil).ListAzureKeyVaults), arg0, arg1, arg2)
}

// ListAzureLogicApps mocks base method.
func (m *MockAzureClient) ListAzureLogicApps(arg0 context.Context, arg1, arg2 string, arg3 int32) <-chan azure.LogicAppResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureLogicApps", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan azure.LogicAppResult)
	return ret0
}

// ListAzureLogicApps indicates an expected call of ListAzureLogicApps.
func (mr *MockAzureClientMockRecorder) ListAzureLogicApps(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureLogicApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureLogicApps), arg0, arg1, arg2, arg3)
}

// ListAzureManagedClusters mocks base method.
func (m *MockAzureClient) ListAzureManagedClusters(arg0 context.Context, arg1 string) <-chan azure.ManagedClusterResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureManagedClusters", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.ManagedClusterResult)
	return ret0
}

// ListAzureManagedClusters indicates an expected call of ListAzureManagedClusters.
func (mr *MockAzureClientMockRecorder) ListAzureManagedClusters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureManagedClusters", reflect.TypeOf((*MockAzureClient)(nil).ListAzureManagedClusters), arg0, arg1)
}

// ListAzureManagementGroupDescendants mocks base method.
func (m *MockAzureClient) ListAzureManagementGroupDescendants(arg0 context.Context, arg1 string, arg2 int32) <-chan azure.DescendantInfoResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureManagementGroupDescendants", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.DescendantInfoResult)
	return ret0
}

// ListAzureManagementGroupDescendants indicates an expected call of ListAzureManagementGroupDescendants.
func (mr *MockAzureClientMockRecorder) ListAzureManagementGroupDescendants(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureManagementGroupDescendants", reflect.TypeOf((*MockAzureClient)(nil).ListAzureManagementGroupDescendants), arg0, arg1, arg2)
}

// ListAzureManagementGroups mocks base method.
func (m *MockAzureClient) ListAzureManagementGroups(arg0 context.Context, arg1 string) <-chan azure.ManagementGroupResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureManagementGroups", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.ManagementGroupResult)
	return ret0
}

// ListAzureManagementGroups indicates an expected call of ListAzureManagementGroups.
func (mr *MockAzureClientMockRecorder) ListAzureManagementGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureManagementGroups", reflect.TypeOf((*MockAzureClient)(nil).ListAzureManagementGroups), arg0, arg1)
}

// ListAzureResourceGroups mocks base method.
func (m *MockAzureClient) ListAzureResourceGroups(arg0 context.Context, arg1 string, arg2 query.RMParams) <-chan azure.ResourceGroupResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureResourceGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.ResourceGroupResult)
	return ret0
}

// ListAzureResourceGroups indicates an expected call of ListAzureResourceGroups.
func (mr *MockAzureClientMockRecorder) ListAzureResourceGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureResourceGroups", reflect.TypeOf((*MockAzureClient)(nil).ListAzureResourceGroups), arg0, arg1, arg2)
}

// ListAzureStorageAccounts mocks base method.
func (m *MockAzureClient) ListAzureStorageAccounts(arg0 context.Context, arg1 string) <-chan azure.StorageAccountResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureStorageAccounts", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.StorageAccountResult)
	return ret0
}

// ListAzureStorageAccounts indicates an expected call of ListAzureStorageAccounts.
func (mr *MockAzureClientMockRecorder) ListAzureStorageAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureStorageAccounts", reflect.TypeOf((*MockAzureClient)(nil).ListAzureStorageAccounts), arg0, arg1)
}

// ListAzureStorageContainers mocks base method.
func (m *MockAzureClient) ListAzureStorageContainers(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6 string) <-chan azure.StorageContainerResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureStorageContainers", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(<-chan azure.StorageContainerResult)
	return ret0
}

// ListAzureStorageContainers indicates an expected call of ListAzureStorageContainers.
func (mr *MockAzureClientMockRecorder) ListAzureStorageContainers(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureStorageContainers", reflect.TypeOf((*MockAzureClient)(nil).ListAzureStorageContainers), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListAzureSubscriptions mocks base method.
func (m *MockAzureClient) ListAzureSubscriptions(arg0 context.Context) <-chan azure.SubscriptionResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureSubscriptions", arg0)
	ret0, _ := ret[0].(<-chan azure.SubscriptionResult)
	return ret0
}

// ListAzureSubscriptions indicates an expected call of ListAzureSubscriptions.
func (mr *MockAzureClientMockRecorder) ListAzureSubscriptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureSubscriptions", reflect.TypeOf((*MockAzureClient)(nil).ListAzureSubscriptions), arg0)
}

// ListAzureVMScaleSets mocks base method.
func (m *MockAzureClient) ListAzureVMScaleSets(arg0 context.Context, arg1 string) <-chan azure.VMScaleSetResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureVMScaleSets", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.VMScaleSetResult)
	return ret0
}

// ListAzureVMScaleSets indicates an expected call of ListAzureVMScaleSets.
func (mr *MockAzureClientMockRecorder) ListAzureVMScaleSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureVMScaleSets", reflect.TypeOf((*MockAzureClient)(nil).ListAzureVMScaleSets), arg0, arg1)
}

// ListAzureVirtualMachines mocks base method.
func (m *MockAzureClient) ListAzureVirtualMachines(arg0 context.Context, arg1 string, arg2 query.RMParams) <-chan azure.VirtualMachineResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureVirtualMachines", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan azure.VirtualMachineResult)
	return ret0
}

// ListAzureVirtualMachines indicates an expected call of ListAzureVirtualMachines.
func (mr *MockAzureClientMockRecorder) ListAzureVirtualMachines(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureVirtualMachines", reflect.TypeOf((*MockAzureClient)(nil).ListAzureVirtualMachines), arg0, arg1, arg2)
}

// ListAzureWebApps mocks base method.
func (m *MockAzureClient) ListAzureWebApps(arg0 context.Context, arg1 string) <-chan azure.WebAppResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAzureWebApps", arg0, arg1)
	ret0, _ := ret[0].(<-chan azure.WebAppResult)
	return ret0
}

// ListAzureWebApps indicates an expected call of ListAzureWebApps.
func (mr *MockAzureClientMockRecorder) ListAzureWebApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAzureWebApps", reflect.TypeOf((*MockAzureClient)(nil).ListAzureWebApps), arg0, arg1)
}

// ListRoleAssignmentsForResource mocks base method.
func (m *MockAzureClient) ListRoleAssignmentsForResource(arg0 context.Context, arg1, arg2, arg3 string) <-chan azure.RoleAssignmentResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleAssignmentsForResource", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(<-chan azure.RoleAssignmentResult)
	return ret0
}

// ListRoleAssignmentsForResource indicates an expected call of ListRoleAssignmentsForResource.
func (mr *MockAzureClientMockRecorder) ListRoleAssignmentsForResource(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleAssignmentsForResource", reflect.TypeOf((*MockAzureClient)(nil).ListRoleAssignmentsForResource), arg0, arg1, arg2, arg3)
}

// TenantInfo mocks base method.
func (m *MockAzureClient) TenantInfo() azure.Tenant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantInfo")
	ret0, _ := ret[0].(azure.Tenant)
	return ret0
}

// TenantInfo indicates an expected call of TenantInfo.
func (mr *MockAzureClientMockRecorder) TenantInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantInfo", reflect.TypeOf((*MockAzureClient)(nil).TenantInfo))
}
